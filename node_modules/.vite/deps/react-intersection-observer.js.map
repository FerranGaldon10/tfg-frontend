{
  "version": 3,
  "sources": ["../../src/observe.ts", "../../src/InView.tsx", "../../src/useInView.tsx"],
  "sourcesContent": ["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n", "import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n", "import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],
  "mappings": "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",
  "names": ["observerMap", "Map", "RootIds", "WeakMap", "rootId", "unsupportedValue", "undefined", "defaultFallbackInView", "inView", "getRootId", "root", "has", "get", "set", "toString", "optionsToId", "options", "Object", "keys", "sort", "filter", "key", "map", "createObserver", "id", "instance", "elements", "thresholds", "observer", "IntersectionObserver", "entries", "forEach", "entry", "_elements$get", "isIntersecting", "some", "threshold", "intersectionRatio", "trackVisibility", "isVisible", "target", "callback", "Array", "isArray", "observe", "element", "fallbackInView", "window", "bounds", "getBoundingClientRect", "time", "boundingClientRect", "intersectionRect", "rootBounds", "_createObserver", "callbacks", "push", "unobserve", "splice", "indexOf", "length", "size", "disconnect", "isPlainChildren", "props", "children", "InView", "_React$Component", "_inheritsLoose", "_this", "call", "node", "_unobserveCb", "handleNode", "triggerOnce", "skip", "setState", "initialInView", "observeNode", "handleChange", "onChange", "state", "_proto", "prototype", "componentDidUpdate", "prevProps", "rootMargin", "delay", "componentWillUnmount", "_this$props", "render", "_this$state", "ref", "_this$props2", "as", "_objectWithoutPropertiesLoose", "_excluded", "createElement", "_extends", "Component", "useInView", "_temp", "_state$entry", "_ref", "_React$useState", "useState", "setRef", "useRef", "_React$useState2", "current", "React", "useEffect", "entryTarget", "previousEntryTarget", "result"]
}
